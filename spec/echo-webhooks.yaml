openapi: 3.0.2
info:
    title: Echo Webhooks
    description: >
        # Introduction

        This API specification describes the webhook functionality of the Echo API. Webhooks allow apps to
        receive HTTP callbacks in real-time when events happen in Echo.


        Echo makes a HTTP `POST` request to a webhook URL. All requests are sent with content type
        `application/json` and contain an `event` message (see [Events](#section/Events)).


        Please refer to the [Webhook call](#operation/WebhookCall) POST endpoint
        for details on the exact contents of the request body and headers.


        # Endpoint requirements

        The receiving endpoint must:


        - be accessible via an HTTPS address with a valid SSL certificate

        - be able to correctly process `event` requests (see [Webhook call](#operation/WebhookCall))

        - respond to the request within 10 seconds

        - never send a response larger that `32KB`.


        ## Handling duplicate events

        *At least once* delivery is used. This means that events might be delivered multiple times, for
        example as a result of [error handling](#section/Error-handling). Endpoints can use the
        `X-Echo-Delivery-Id` HTTP header to deduplicate events.


        ## Responding to a callback

        Receiving endpoints must return a HTTP status code `2xx` to acknowledge it received the request. You
        should return an empty body with your response.


        Any other HTTP status codes indicates that you did not receive the webhook and are considered an
        error response. This includes HTTP `3xx` redirection codes, these are not followed by Echo. Endpoints
        must never send a response larger that `32KB`.


        Receiving endpoints must respond to Echo within 10 seconds. If no response is received within 10
        seconds, this is considered an error response.


        It is best practice to acknowledge webhook requests immediately, and defer processing of the request
        (i.e. making additional network calls, performing complex logic, et cetera).


        # Error handling

        If a request to the receiving endpoints fails, Echo starts a retry process. As a result of this,
        events might be delivered multiple times (for example when an endpoint _did_ receive a message, but
        _did not_ respond within 10 seconds). Endpoints can use the `X-Echo-Delivery-Id` HTTP header to
        [deduplicate events](#section/Endpoint-requirements/Handling-duplicate-events).


        Echo might drop events if a certain delivery queue size threshold is exceeded due to retries. The
        oldest events is dropped first. When endpoints are down for an extended period of time, they
        might be automatically disabled.


        Endpoints are responsible for discarding events that are not relevant anymore. For example, events
        that are bound to a certain time (e.g. a scheduled activity from a timetable) that has already passed
        should not be forwarded to end-users.


        # Authentication

        Receiving endpoints can implement two types of authentication:

          - Basic HTTP Authentication
          - Authentication using Bearer tokens

        It is up to the receiving endpoint to validate the credentials.

        <security-definitions />


        # Localization

        Echo is currently unaware of the user's preferred locale. So when one wants to localize messages
        presented to the user, let's say render notifications in an app, this localization needs to happen in
        the app.

        For this reason, API responses can include human-readable strings in multiple locales.

        These are organised in the following `LocalizedString` object structure as documented below.

        The API user can then select the representation in the desired locale.

        It should check whether a locale-specific representation is available and fall back to the default
        representation if unavailable.


        This also means this datatype can be used in notification payloads when posting notifications to Echo.
        Currently, when Echo renders notifications (for example, when sending email notifications) it uses
        the representation for the default locale.

        ### LocalizedString

        String with representations in multiple locales.

        <SchemaDefinition schemaRef="#/components/schemas/LocalizedString" />

        # Events

        Events are used to communicate when something interesting happens in Echo. For example, when a batch
        of notifications is created, an `Event` with the type `notification_batch.created` is created.


        ## The Event object

        <SchemaDefinition schemaRef="#/components/schemas/Event" />


        ## Event types

        These are the event types that currently exist:


        | type                         | description                                                 |

        |------------------------------|-------------------------------------------------------------|

        | `notification_batch.created` | Event indicating one or more changes to a user's timetable. |

        | `ping`                       | _Currently unused._                                         |


        We may add more event types at any time, so in developing and maintaining your code, you should not
        assume that only these types exist.

        # Well-known Notification Types

        Notification types are dynamic, so it would be impossible to list them here.

        The contract is that sender and receiver should agree on the schema of the payload.

        To facilitate this, we have defined some well-known notification types.


        ## timetable_change

        This type of notification indicates a change within the user's timetable.


        One notification is sent per changed timetable event in a specific timetable, so when multiple events
        change, multiple notifications are sent.

        Also, when an event belongs to multiple timetables, multiple notifications are sent.

        These notifications may or may not be grouped together in a batch.


        ### payload

        <SchemaDefinition schemaRef="#/components/schemas/Notification.Payload_TimetableChange" />
    contact:
        name: API Support
        url: 'https://mytimetable.net'
        email: support@eveoh.nl
    version: 1.0.3
servers:
    -   url: 'https://{baseUrl}'
        description: The URL of your server listening for Webhook calls.
        variables:
            baseUrl:
                default: example.org
paths:
    /:
        description: ''
        post:
            tags:
                - Calls
            summary: Webhook call
            description: >-
                Use webhooks to be notified about events that happen in Echo.


                Echo can send webhook events that notify your application any time an event happens.
            operationId: WebhookCall
            parameters:
                -   name: X-Echo-Delivery-Id
                    in: header
                    description: >-
                        A unique identifier to identify the delivery. This value can be used to deduplicate
                        deliveries if they are sent multiple times, for example as a result of [error
                        handling](#error-handling).
                    required: true
                    schema:
                        format: uuid
                        type: string
                        example: c09167dd-9cda-4011-b152-8d4af7785ce6
                -   name: User-Agent
                    in: header
                    description: User agent of the Echo client.
                    required: true
                    schema:
                        type: string
                        example: Echo-Webhook-Client/1.0.0
            requestBody:
                content:
                    application/json:
                        schema:
                            $ref: '#/components/schemas/Event'
                required: true
            responses:
                '200':
                    description: >-
                        Receiving endpoints must return a `2xx` HTTP response code to acknowledge it has
                        received the request.
                '201':
                    description: >-
                        Receiving endpoints must return a `2xx` HTTP response code to acknowledge it has
                        received the request.
                '202':
                    description: >-
                        Receiving endpoints must return a `2xx` HTTP response code to acknowledge it has
                        received the request.
                '204':
                    description: >-
                        Receiving endpoints must return a `2xx` HTTP response code to acknowledge it has
                        received the request.
            security:
                -   http_basic_auth: []
                -   http_bearer: []
components:
    schemas:
        Event:
            type: object
            properties:
                id:
                    format: uuid
                    description: Unique identifier of the event.
                    type: string
                    example: f9d421d5-63e3-4724-8a21-d7d81d81417a
                type:
                    description: >-
                        Type of the event. See [Events](#section/Events/Event-types) for a description of
                        all types.
                    type: string
            discriminator:
                propertyName: type
                mapping:
                    notification_batch.created: '#/components/schemas/Event_NotificationBatchCreated'
                    ping: '#/components/schemas/Event_Ping'
        Event_NotificationBatchCreated:
            allOf:
                -   $ref: '#/components/schemas/Event'
                -   type: object
                    properties:
                        data:
                            $ref: '#/components/schemas/NotificationBatch'
        Event_Ping:
            allOf:
                -   $ref: '#/components/schemas/Event'
                -   type: object
                    properties:
                        data:
                            description: Ping response data object.
                            type: object
                            properties:
                                ping:
                                    description: Always returns `true`.
                                    type: boolean
                                    example: true
        LocalizedString:
            description: String with representations in multiple locales.
            type: object
            properties:
                '@type':
                    description: >-
                        Type of this object, which is always `localized_string`. Can be used as a hint while
                        parsing.
                    type: string
                    example: localized_string
                defaultValue:
                    description: Representation for the default locale.
                    type: string
                localizedValues:
                    description: >-
                        Object containing representations for additional locales. The representation for the
                        default locale is not included, so this map can be empty. Attribute names are
                        [BCP47](https://tools.ietf.org/html/bcp47) language tags and their values are the
                        actual representations.
                    type: object
                    additionalProperties:
                        type: string
            example:
                '@type': localized_string
                defaultValue: This is a localised message.
                localizedValues:
                    en-US: This is a localized message.
                    nl: Dit is een gelokaliseerd bericht.
        Notification:
            description: >-
                Represents a notification sent to a user.


                A notification contains a payload that depends on the type of notification sent. See
                [Well-known Notification Types](#tag/WellKnownNotificationTypes).
            type: object
            properties:
                id:
                    format: uuid
                    description: Unique identifier of the notification.
                    type: string
                    example: ef67d9ac-f97c-4a76-b914-8104aa537c0e
                priority:
                    description: Priority of the notification.
                    enum:
                        - LOW
                        - DEFAULT
                        - HIGH
                    type: string
                    example: DEFAULT
                timestamp:
                    format: date-time
                    description: >-
                        Time at which the notification was created.


                        ISO8601 formatted date-time string including timezone offset
                        (`YYYY-MM-DDThh:mm±hh:mm`).
                    type: string
                    example: '2019-04-23T08:45:23.000+01:00'
                type:
                    description: Type of the notification.
                    type: string
                user:
                    description: Target user for the notification.
                    type: string
                    example: john.doe
                payload:
                    description: The payload of the notification.
                    type: object
                    example:
                        ...: See 'Notification types' for example payloads per notification type.
        Notification.Payload_TimetableChange:
            title: timetable_change
            type: object
            properties:
                event:
                    description: A changed event in the target user's timetable.
                    type: object
                    properties:
                        id:
                            description: The ID of the event that has been changed.
                            type: string
                            example: 2019!9347347
                        created:
                            description: >-
                                `true` if the event has been added to the timetable. Mutually exclusive with
                                `updated` and `removed`.


                                `newSchedule` contains the schedule of the newly created event. `attributes`
                                contains all attributes. Since there are no old attribute values, they are
                                all `null`.
                            type: boolean
                            example: false
                        updated:
                            description: >-
                                `true` if the event already was and remains in the timetable. Mutually
                                exclusive with `updated` and `removed`.


                                `oldSchedule` contains the schedule of the event before the update,
                                `newSchedule` contains the schedule of the event after the update.
                                `attributes` only contains changed attributes. Old or new values can be
                                `null` when an attribute was added or removed.
                            type: boolean
                            example: false
                        removed:
                            description: >-
                                `true` if the event has been removed from the timetable. Mutually exclusive
                                with `updated` and `removed`.


                                `oldSchedule` contains the schedule of the event before removal. `attributes`
                                 is empty. In a future implementation, `attributes` might include the old
                                 values.
                            type: boolean
                            example: false
                        scheduleUpdated:
                            description: >-
                                `true` if the event has been `created`, `removed` or rescheduled (the start
                                and/or end of the event has changed).


                                `oldSchedule` contains the schedule of the event before removal or
                                rescheduling. `newSchedule` contains the schedule of the event after creation
                                 or rescheduling.
                            type: boolean
                            example: false
                        name:
                            allOf:
                                -   description: >-
                                        Human-readable name of the event. See
                                        [LocalizedString](#section/Localization).
                                -   $ref: '#/components/schemas/LocalizedString'
                        oldSchedule:
                            allOf:
                                -   description: >-
                                        The schedule of the event before it was removed or rescheduled.
                                    nullable: true
                                -   $ref: '#/components/schemas/Notification.Payload_TimetableChange.Schedule'
                        newSchedule:
                            allOf:
                                -   description: >-
                                        The schedule of the event after it has been created or rescheduled.
                                    nullable: true
                                -   $ref: '#/components/schemas/Notification.Payload_TimetableChange.Schedule'
                        attributes:
                            description: An array of changed attributes for this event.
                            type: array
                            items:
                                description: >-
                                    Represents a change in an attribute of an event. For example, this could
                                    contain a location attribute when the event has been moved to another
                                    location.
                                type: object
                                properties:
                                    name:
                                        description: Machine-readable name of the attribute.
                                        type: string
                                        example: location
                                    label:
                                        allOf:
                                            -   description: >-
                                                    Human-readable name of the attribute. See
                                                    [LocalizedString](#section/Localization).
                                            -   $ref: '#/components/schemas/LocalizedString'
                                    new:
                                        allOf:
                                            -   description: >-
                                                    The value of the attribute after the change. See
                                                    [LocalizedString](#section/Localization).
                                                nullable: true
                                            -   $ref: '#/components/schemas/LocalizedString'
                                    old:
                                        allOf:
                                            -   description: >-
                                                    The value of the attribute before the change. See
                                                    [LocalizedString](#section/Localization).
                                                nullable: true
                                            -   $ref: '#/components/schemas/LocalizedString'
                timetable:
                    description: Timetable the changed event belongs to.
                    type: object
                    properties:
                        id:
                            description: ID of the timetable the changed event belongs to.
                            type: string
                            example: 2019!student!23452
                        name:
                            allOf:
                                -   description: >-
                                        Human-readable name of the timetable the changed event belongs to. See
                                        [LocalizedString](#section/Localization).
                                -   $ref: '#/components/schemas/LocalizedString'
                viewTimetableUrl:
                    format: url
                    description: URL where the user can view their timetable.
                    type: string
                    example: 'https://mytimetable.example.org'
            example:
                event:
                    id: 2019!9347347
                    created: false
                    updated: true
                    removed: false
                    scheduleUpdated: true
                    name:
                        '@type': localized_string
                        defaultValue: M-1423 - Linear algebra 101
                        localizedValues:
                            en-US: M-1423 - Linear algebra 101
                            nl: M-1423 - Lineaire algebra 101
                    oldSchedule:
                        start:
                            dateTime: '2019-04-23T08:45+01:00'
                        end:
                            dateTime: '2019-04-23T09:45+01:00'
                        multiDay: false
                    newSchedule:
                        start:
                            date: '2019-04-23'
                        end:
                            date: '2019-04-25'
                        multiDay: true
                    attributes:
                        -   name: location
                            label:
                                '@type': localized_string
                                defaultValue: Room(s)
                                localizedValues:
                                    en-US: Room(s)
                                    nl: Ruimte(s)
                            new:
                                '@type': localized_string
                                defaultValue: C1.241
                                localizedValues:
                                    en-US: C1.241
                                    nl: C1.241
                            old:
                                '@type': localized_string
                                defaultValue: C2.021
                                localizedValues:
                                    en-US: C2.021
                                    nl: C2.021
                timetable:
                    id: 2019!student!23452
                    name:
                        '@type': localized_string
                        defaultValue: John Doe (23452)
                        localizedValues:
                            en-US: John Doe (23452)
                            nl: John Doe (23452)
                viewTimetableUrl: 'https://mytimetable.example.org'
        Notification.Payload_TimetableChange.Schedule:
            type: object
            properties:
                start:
                    allOf:
                        -   description: Start of the event.
                            nullable: true
                        -   $ref: '#/components/schemas/Notification.Payload_TimetableChange.Schedule.Date'
                end:
                    allOf:
                        -   description: End of the event.
                            nullable: true
                        -   $ref: '#/components/schemas/Notification.Payload_TimetableChange.Schedule.Date'
                multiDay:
                    description: True if the timetabled event spans multiple days.
                    type: boolean
            example:
                start:
                    dateTime: '2019-04-23T08:45+01:00'
                end:
                    dateTime: '2019-04-23T09:45+01:00'
                multiDay: false
        Notification.Payload_TimetableChange.Schedule.Date:
            type: object
            properties:
                date:
                    format: date
                    description: >-
                        ISO8601 formatted date string (`YYYY-MM-DD`). Null when the event is *not* an all-day
                        event.
                    type: string
                    nullable: true
                    example: '2019-04-23'
                dateTime:
                    format: date-time
                    description: >-
                        ISO8601 formatted date-time string including timezone offset
                        (`YYYY-MM-DDThh:mm±hh:mm`). Null when the event is an all-day event.
                    type: string
                    nullable: true
                    example: '2019-04-23T08:45+02:00'
        NotificationBatch:
            description: A batch of notifications.
            type: object
            properties:
                type:
                    description: >-
                        The type of the notifications in this batch. All notifications in a batch have the
                        same type.
                    type: string
                user:
                    description: >-
                        Target user of the notifications in this batch. All notifications in a batch have the
                        same target user.
                    type: string
                    example: john.doe
                notifications:
                    description: The notifications in this batch.
                    type: array
                    items:
                        $ref: '#/components/schemas/Notification'
    securitySchemes:
        http_basic_auth:
            type: http
            description: >-
                Basic HTTP Authentication.


                As per [RFC 7617](https://tools.ietf.org/html/rfc7617).
            scheme: basic
        http_bearer:
            type: http
            description: >-
                Authentication using Bearer tokens.


                As per [RFC 6750](https://tools.ietf.org/html/rfc6750).
            scheme: bearer
tags:
    -   name: Calls
